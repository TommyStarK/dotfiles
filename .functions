#!/usr/bin/env bash

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
	local tmpFile="${@%/}.tar";
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

	size=$(
		stat -f"%z" "${tmpFile}" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}" 2> /dev/null;  # GNU `stat`
	);

	local cmd="";
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli";
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz";
		else
			cmd="gzip";
		fi;
	fi;

	echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`…";
	"${cmd}" -v "${tmpFile}" || return 1;
	[ -f "${tmpFile}" ] && rm "${tmpFile}";

	zippedSize=$(
		stat -f"%z" "${tmpFile}.gz" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}.gz" 2> /dev/null; # GNU `stat`
	);

	echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully.";
}

# Determine size of a file or total size of a directory
function filesize() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# Use Git’s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@";
	}
fi;

# Normalize `open` across Linux, macOS, and Windows.
if [ ! $(uname -s) = 'Darwin' ]; then
	if grep -q Microsoft /proc/version; then
		# Ubuntu on Windows using the Linux subsystem
		alias open='explorer.exe';
	else
		alias open='xdg-open';
	fi
fi

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}";
	sleep 1 && open "http://localhost:${port}/" &
	python3 -m http.server $port --directory .
}

# Run `dig` and display the most useful info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer;
}

function dockerstopall() {
    docker ps -a | awk '{print $1}' | xargs docker stop
}

function  dockerrmall() {
    docker ps -a | awk '{print $1}' | xargs docker rm
}

function dockerdangling() {
	docker images -qf dangling=true | xargs docker rmi -f
}

function dockerprune() {
	dockerstopall; dockerrmall; dockerdangling; docker volume prune -f; docker network prune -f; docker builder prune -f;
}

function dockershow() {
	echo ">>> Containers";
	docker ps -a;
	echo; echo ">>> Images";
	docker images;
	echo; echo ">>> Volumes";
	docker volume ls;
	echo; echo ">>> Networks";
	docker network ls
}

function dockerreset() {
    dockerstopall; dockerrmall ; docker rmi -f $(docker images -q); docker system prune --all --volumes --force
}

function dockerdisco() {
    for endpoint in $(docker network inspect $1 | jq -r '.[0].Containers[].Name'); do
        docker network disconnect -f $1 $endpoint
    done
}

function kubecleanns () {
	kubectl delete statefulset,deployment,job,services,secrets,configmaps,ingress,pods,pvc,serviceaccount,role,rolebinding --all --namespace $1
}

function kubecleanpod () {
	kubectl delete -n $1  pod $2 --grace-period 0 --force
}

function kubecleanpv() {
	kubectl get pv | grep Released | awk '$1 {print$1}' | while read vol; do kubectl delete pv/${vol}; done
}

function kubedescribepv () {
	kubectl describe -A pv | grep -E "^Name:.*$|^Namespace:.*$|^Released:.*$|^Claim:.*$|^Status:.*$"
}

nvm() {
    if [ -z $NVM_DIR]; then
        export NVM_DIR="$HOME/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    fi
    nvm $@
}
